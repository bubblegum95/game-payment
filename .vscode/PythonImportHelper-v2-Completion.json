[
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ItemService",
        "importPath": "app.services.items_service",
        "description": "app.services.items_service",
        "isExtraImport": true,
        "detail": "app.services.items_service",
        "documentation": {}
    },
    {
        "label": "ItemRepository",
        "importPath": "app.repositories.item_repository",
        "description": "app.repositories.item_repository",
        "isExtraImport": true,
        "detail": "app.repositories.item_repository",
        "documentation": {}
    },
    {
        "label": "ItemRepository",
        "importPath": "app.repositories.item_repository",
        "description": "app.repositories.item_repository",
        "isExtraImport": true,
        "detail": "app.repositories.item_repository",
        "documentation": {}
    },
    {
        "label": "CreateItemDto",
        "importPath": "app.schemas.create_item_dto",
        "description": "app.schemas.create_item_dto",
        "isExtraImport": true,
        "detail": "app.schemas.create_item_dto",
        "documentation": {}
    },
    {
        "label": "CreateItemDto",
        "importPath": "app.schemas.create_item_dto",
        "description": "app.schemas.create_item_dto",
        "isExtraImport": true,
        "detail": "app.schemas.create_item_dto",
        "documentation": {}
    },
    {
        "label": "CreateItemDto",
        "importPath": "app.schemas.create_item_dto",
        "description": "app.schemas.create_item_dto",
        "isExtraImport": true,
        "detail": "app.schemas.create_item_dto",
        "documentation": {}
    },
    {
        "label": "GetItemDto",
        "importPath": "app.schemas.get_item_dto",
        "description": "app.schemas.get_item_dto",
        "isExtraImport": true,
        "detail": "app.schemas.get_item_dto",
        "documentation": {}
    },
    {
        "label": "GetItemDto",
        "importPath": "app.schemas.get_item_dto",
        "description": "app.schemas.get_item_dto",
        "isExtraImport": true,
        "detail": "app.schemas.get_item_dto",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.dependencies.auth",
        "description": "app.dependencies.auth",
        "isExtraImport": true,
        "detail": "app.dependencies.auth",
        "documentation": {}
    },
    {
        "label": "UserService",
        "importPath": "app.services.user_service",
        "description": "app.services.user_service",
        "isExtraImport": true,
        "detail": "app.services.user_service",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "app.repositories.user_repository",
        "description": "app.repositories.user_repository",
        "isExtraImport": true,
        "detail": "app.repositories.user_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "app.repositories.user_repository",
        "description": "app.repositories.user_repository",
        "isExtraImport": true,
        "detail": "app.repositories.user_repository",
        "documentation": {}
    },
    {
        "label": "SignInDto",
        "importPath": "app.schemas.sign_in_dto",
        "description": "app.schemas.sign_in_dto",
        "isExtraImport": true,
        "detail": "app.schemas.sign_in_dto",
        "documentation": {}
    },
    {
        "label": "SignInDto",
        "importPath": "app.schemas.sign_in_dto",
        "description": "app.schemas.sign_in_dto",
        "isExtraImport": true,
        "detail": "app.schemas.sign_in_dto",
        "documentation": {}
    },
    {
        "label": "SignUpDto",
        "importPath": "app.schemas.sign_up_dto",
        "description": "app.schemas.sign_up_dto",
        "isExtraImport": true,
        "detail": "app.schemas.sign_up_dto",
        "documentation": {}
    },
    {
        "label": "SignUpDto",
        "importPath": "app.schemas.sign_up_dto",
        "description": "app.schemas.sign_up_dto",
        "isExtraImport": true,
        "detail": "app.schemas.sign_up_dto",
        "documentation": {}
    },
    {
        "label": "TokenService",
        "importPath": "app.services.token_service",
        "description": "app.services.token_service",
        "isExtraImport": true,
        "detail": "app.services.token_service",
        "documentation": {}
    },
    {
        "label": "TokenService",
        "importPath": "app.services.token_service",
        "description": "app.services.token_service",
        "isExtraImport": true,
        "detail": "app.services.token_service",
        "documentation": {}
    },
    {
        "label": "TokenService",
        "importPath": "app.services.token_service",
        "description": "app.services.token_service",
        "isExtraImport": true,
        "detail": "app.services.token_service",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "HTTPAuthorizationCredentials",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "HTTPBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "HTTP_401_UNAUTHORIZED",
        "importPath": "starlette.status",
        "description": "starlette.status",
        "isExtraImport": true,
        "detail": "starlette.status",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tortoise",
        "description": "tortoise",
        "isExtraImport": true,
        "detail": "tortoise",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "tortoise",
        "description": "tortoise",
        "isExtraImport": true,
        "detail": "tortoise",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tortoise",
        "description": "tortoise",
        "isExtraImport": true,
        "detail": "tortoise",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "tortoise",
        "description": "tortoise",
        "isExtraImport": true,
        "detail": "tortoise",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "tortoise",
        "description": "tortoise",
        "isExtraImport": true,
        "detail": "tortoise",
        "documentation": {}
    },
    {
        "label": "Tortoise",
        "importPath": "tortoise",
        "description": "tortoise",
        "isExtraImport": true,
        "detail": "tortoise",
        "documentation": {}
    },
    {
        "label": "PayEnum",
        "importPath": "app.type.pay_enum",
        "description": "app.type.pay_enum",
        "isExtraImport": true,
        "detail": "app.type.pay_enum",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tortoise.models",
        "description": "tortoise.models",
        "isExtraImport": true,
        "detail": "tortoise.models",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "app.models.item_model",
        "description": "app.models.item_model",
        "isExtraImport": true,
        "detail": "app.models.item_model",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user_model",
        "description": "app.models.user_model",
        "isExtraImport": true,
        "detail": "app.models.user_model",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user_model",
        "description": "app.models.user_model",
        "isExtraImport": true,
        "detail": "app.models.user_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "items",
        "importPath": "app.api.item",
        "description": "app.api.item",
        "isExtraImport": true,
        "detail": "app.api.item",
        "documentation": {}
    },
    {
        "label": "users",
        "importPath": "app.api.user",
        "description": "app.api.user",
        "isExtraImport": true,
        "detail": "app.api.user",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "starlette.config",
        "description": "starlette.config",
        "isExtraImport": true,
        "detail": "starlette.config",
        "documentation": {}
    },
    {
        "label": "get_item_service",
        "kind": 2,
        "importPath": "app.api.item",
        "description": "app.api.item",
        "peekOfCode": "def get_item_service():\n  repository = ItemRepository()\n  return ItemService(repository)\n@items.post(\"/\")\nasync def create_items(dto: CreateItemDto, service: ItemService = Depends(get_item_service)):\n  try:\n    item = await service.create_item(dto)\n    if not item:\n      raise Exception('아이템 생성 실패')\n    return JSONResponse(",
        "detail": "app.api.item",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "app.api.item",
        "description": "app.api.item",
        "peekOfCode": "items = APIRouter(\n  prefix=\"/items\",\n  tags = [\"items\"],\n  responses = {404: {\"description\": \"Not Found\"}},\n)\ndef get_item_service():\n  repository = ItemRepository()\n  return ItemService(repository)\n@items.post(\"/\")\nasync def create_items(dto: CreateItemDto, service: ItemService = Depends(get_item_service)):",
        "detail": "app.api.item",
        "documentation": {}
    },
    {
        "label": "payments",
        "kind": 5,
        "importPath": "app.api.pay",
        "description": "app.api.pay",
        "peekOfCode": "payments = APIRouter(\n  prefix= \"/payments\", \n  tags=[\"payments\"], \n  responses={404: {\"description\": \"Not Found\"}}\n)\n@payments.post(\"/identity-verify\")\nasync def identity_verify(dto):\n  print(dto)\n  try: \n    if not dto: ",
        "detail": "app.api.pay",
        "documentation": {}
    },
    {
        "label": "get_user_service",
        "kind": 2,
        "importPath": "app.api.user",
        "description": "app.api.user",
        "peekOfCode": "def get_user_service() -> UserService:\n  repository = UserRepository()\n  token_service = TokenService()\n  service = UserService(repository, token_service)\n  return service\ndef get_token_service() -> TokenService:\n  token_service = TokenService()\n  return token_service\n@users.get(\"/\")\ndef read_users():",
        "detail": "app.api.user",
        "documentation": {}
    },
    {
        "label": "get_token_service",
        "kind": 2,
        "importPath": "app.api.user",
        "description": "app.api.user",
        "peekOfCode": "def get_token_service() -> TokenService:\n  token_service = TokenService()\n  return token_service\n@users.get(\"/\")\ndef read_users():\n  return {\"hello\": \"world\"}\n@users.post(\"/sign-up\")\nasync def sign_up(dto: SignUpDto, service: UserService = Depends(get_user_service)):\n  try:\n    print(\"dto\", dto)",
        "detail": "app.api.user",
        "documentation": {}
    },
    {
        "label": "read_users",
        "kind": 2,
        "importPath": "app.api.user",
        "description": "app.api.user",
        "peekOfCode": "def read_users():\n  return {\"hello\": \"world\"}\n@users.post(\"/sign-up\")\nasync def sign_up(dto: SignUpDto, service: UserService = Depends(get_user_service)):\n  try:\n    print(\"dto\", dto)\n    user_acnt = await service.sign_up(dto)\n    if user_acnt:\n      return JSONResponse(\n        content={\"message\": \"계정 생성을 완료하였습니다. 로그인 해주세요.\"},",
        "detail": "app.api.user",
        "documentation": {}
    },
    {
        "label": "users",
        "kind": 5,
        "importPath": "app.api.user",
        "description": "app.api.user",
        "peekOfCode": "users = APIRouter(\n  prefix= \"/users\", \n  tags=[\"users\"], \n  responses={404: {\"description\": \"Not Found\"}}\n)\ndef get_user_service() -> UserService:\n  repository = UserRepository()\n  token_service = TokenService()\n  service = UserService(repository, token_service)\n  return service",
        "detail": "app.api.user",
        "documentation": {}
    },
    {
        "label": "token_service",
        "kind": 5,
        "importPath": "app.dependencies.auth",
        "description": "app.dependencies.auth",
        "peekOfCode": "token_service = TokenService()\nbearer_scheme = HTTPBearer()\nasync def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(bearer_scheme)):\n  token = credentials.credentials\n  user_id = await token_service.verify_token(token)\n  if user_id is None:\n    raise HTTPException(\n      status_code=HTTP_401_UNAUTHORIZED,\n      detail=\"Invalid or expired token\",\n      headers={\"WWW-Authenticate\": \"Bearer\"},",
        "detail": "app.dependencies.auth",
        "documentation": {}
    },
    {
        "label": "bearer_scheme",
        "kind": 5,
        "importPath": "app.dependencies.auth",
        "description": "app.dependencies.auth",
        "peekOfCode": "bearer_scheme = HTTPBearer()\nasync def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(bearer_scheme)):\n  token = credentials.credentials\n  user_id = await token_service.verify_token(token)\n  if user_id is None:\n    raise HTTPException(\n      status_code=HTTP_401_UNAUTHORIZED,\n      detail=\"Invalid or expired token\",\n      headers={\"WWW-Authenticate\": \"Bearer\"},\n    )",
        "detail": "app.dependencies.auth",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "app.models.item_model",
        "description": "app.models.item_model",
        "peekOfCode": "class Item(Model):\n    id = fields.UUIDField(pk=True, default=uuid.uuid4)\n    name = fields.CharField(max_length = 10, null = False)\n    description = fields.CharField(max_length = 100, null = False)\n    price = fields.IntField(null = False)\n    created_at = fields.DatetimeField(auto_now=True)\n    class Meta:\n        table = \"item\"\n        table_description = \"상품 테이블\"\n    def __str__(self):",
        "detail": "app.models.item_model",
        "documentation": {}
    },
    {
        "label": "Payment",
        "kind": 6,
        "importPath": "app.models.pay_model",
        "description": "app.models.pay_model",
        "peekOfCode": "class Payment(Model):\n    id = fields.UUIDField(pk=True, default=uuid.uuid4)\n    customer_id = fields.ForeignKeyField(\"models.User\", related_name=\"payments\")\n    order_id = fields.CharField(unique=True, null=False, max_length=20)\n    type = fields.CharEnumField(enum_type=PayEnum)\n    price = fields.IntField(null=False)\n    receipt = fields.CharField(null=False, max_length=30)\n    created_at = fields.DatetimeField(auto_now=True)\n    class Meta:\n        table = \"payment\"",
        "detail": "app.models.pay_model",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models.user_model",
        "description": "app.models.user_model",
        "peekOfCode": "class User(Model):\n    id = fields.UUIDField(pk=True, default=uuid.uuid4)\n    name = fields.CharField(max_length = 10, null = False)\n    username = fields.CharField(max_length = 10, null = False)\n    email = fields.CharField(max_length = 20, unique = True, null = False)\n    phone = fields.CharField(max_length = 15, unique = True, null = False)\n    password = fields.CharField(max_length = 100, null = False)\n    refresh_token = fields.CharField(max_length = 200, null = True)\n    created_at = fields.DatetimeField(auto_now=True)\n    def __str__(self):",
        "detail": "app.models.user_model",
        "documentation": {}
    },
    {
        "label": "ItemRepository",
        "kind": 6,
        "importPath": "app.repositories.item_repository",
        "description": "app.repositories.item_repository",
        "peekOfCode": "class ItemRepository:\n  _instance = None\n  def __new__(cls, *args, **kwargs):\n    if cls._instance is None:\n      cls._instance = super().__new__(cls)\n    return cls._instance\n  def __init__(self, repository=Item):\n    if not hasattr(self, 'initialized'):\n      self.repository = repository\n      self.initialized = True",
        "detail": "app.repositories.item_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "kind": 6,
        "importPath": "app.repositories.user_repository",
        "description": "app.repositories.user_repository",
        "peekOfCode": "class UserRepository:\n  _instance = None\n  def __new__(cls, *args, **kwargs):\n    if cls._instance is None:\n      cls._instance = super().__new__(cls)\n    return cls._instance\n  def __init__(self, repository=User):\n    if not hasattr(self, \"initialized\"):\n      self.repository = repository\n      self.initialized = True ",
        "detail": "app.repositories.user_repository",
        "documentation": {}
    },
    {
        "label": "CreateItemDto",
        "kind": 6,
        "importPath": "app.schemas.create_item_dto",
        "description": "app.schemas.create_item_dto",
        "peekOfCode": "class CreateItemDto(BaseModel):\n  name: str\n  description: str\n  price: int",
        "detail": "app.schemas.create_item_dto",
        "documentation": {}
    },
    {
        "label": "GetItemDto",
        "kind": 6,
        "importPath": "app.schemas.get_item_dto",
        "description": "app.schemas.get_item_dto",
        "peekOfCode": "class GetItemDto(BaseModel):\n  id: UUID\n  name: str\n  description: str\n  price: int\n  created_at: datetime",
        "detail": "app.schemas.get_item_dto",
        "documentation": {}
    },
    {
        "label": "SignInDto",
        "kind": 6,
        "importPath": "app.schemas.sign_in_dto",
        "description": "app.schemas.sign_in_dto",
        "peekOfCode": "class SignInDto(BaseModel): \n  email: str\n  password: str",
        "detail": "app.schemas.sign_in_dto",
        "documentation": {}
    },
    {
        "label": "SignUpDto",
        "kind": 6,
        "importPath": "app.schemas.sign_up_dto",
        "description": "app.schemas.sign_up_dto",
        "peekOfCode": "class SignUpDto(BaseModel):\n    name: str = Field(\n        ...,\n        min_length=2,\n        max_length=10,\n        description=\"이름 (2~10자)\",\n        example=\"홍길동\"\n    )\n    username: str = Field(\n        ...,",
        "detail": "app.schemas.sign_up_dto",
        "documentation": {}
    },
    {
        "label": "ItemService",
        "kind": 6,
        "importPath": "app.services.items_service",
        "description": "app.services.items_service",
        "peekOfCode": "class ItemService:\n  _instance = None\n  def __new__(cls, *args, **kwargs):\n    if cls._instance is None:\n      cls._instance = super().__new__(cls)\n    return cls._instance\n  def __init__(self, repository: ItemRepository):\n    if not hasattr(self, 'initialized'):\n      self.repository = repository\n      self.initialized = True",
        "detail": "app.services.items_service",
        "documentation": {}
    },
    {
        "label": "TokenService",
        "kind": 6,
        "importPath": "app.services.token_service",
        "description": "app.services.token_service",
        "peekOfCode": "class TokenService:\n  _instance = None\n  def __new__(cls, *args, **kwargs):\n    if cls._instance is None:\n      cls._instance = super().__new__(cls)\n    return cls._instance\n  def __init__(self):\n    if not hasattr(self, \"initialized\"):\n      self.jwt_secret = config(\"JWT_SECRET\")\n      self.jwt_algorithm = \"HS256\"",
        "detail": "app.services.token_service",
        "documentation": {}
    },
    {
        "label": "UserService",
        "kind": 6,
        "importPath": "app.services.user_service",
        "description": "app.services.user_service",
        "peekOfCode": "class UserService:\n  _instance = None\n  def __new__(cls, *args, **kwargs):\n    if cls._instance is None:\n      cls._instance = super().__new__(cls)\n    return cls._instance\n  def __init__(self, repository: UserRepository | None = None, token_service: TokenService | None = None):\n    if not hasattr(self, \"initialized\"):\n      self.repository = repository or UserRepository()\n      self.token_service = token_service or TokenService()",
        "detail": "app.services.user_service",
        "documentation": {}
    },
    {
        "label": "TORTOISE_ORM",
        "kind": 5,
        "importPath": "app.settings.TORTOISE_ORM",
        "description": "app.settings.TORTOISE_ORM",
        "peekOfCode": "TORTOISE_ORM = {\n    \"connections\": {\"default\": config(\"DB_URL\")},\n    \"apps\": {\n        \"models\": {\n            \"models\": [\"app.models.user_model\", \"app.models.pay_model\", \"aerich.models\"],\n            \"default_connection\": \"default\",\n        },\n    },\n}",
        "detail": "app.settings.TORTOISE_ORM",
        "documentation": {}
    },
    {
        "label": "PayEnum",
        "kind": 6,
        "importPath": "app.type.pay_enum",
        "description": "app.type.pay_enum",
        "peekOfCode": "class PayEnum(Enum):\n  Payment = 'payment'\n  Return = 'return'\n  Refund = 'refund'",
        "detail": "app.type.pay_enum",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "config = Config('.env')\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    try:\n        await Tortoise.init(\n            db_url=config(\"DB_URL\"),\n            modules={\"models\": [\"app.models.user_model\", \"app.models.pay_model\"]},\n        )\n        await Tortoise.generate_schemas()\n        logging.info(\"DB initialized successfully\")",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI(lifespan=lifespan)\n# 라우터 등록\napp.include_router(items)\napp.include_router(users)\n@app.get(\"/\")\nasync def read_root():\n    return {\"Hello\": \"World\"}\n# 로그 설정\nlogging.basicConfig(level=logging.INFO)",
        "detail": "app.main",
        "documentation": {}
    }
]