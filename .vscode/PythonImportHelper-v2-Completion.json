[
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ItemService",
        "importPath": "src.services.items_service",
        "description": "src.services.items_service",
        "isExtraImport": true,
        "detail": "src.services.items_service",
        "documentation": {}
    },
    {
        "label": "ItemRepository",
        "importPath": "src.repositories.items_repository",
        "description": "src.repositories.items_repository",
        "isExtraImport": true,
        "detail": "src.repositories.items_repository",
        "documentation": {}
    },
    {
        "label": "ItemRepository",
        "importPath": "src.repositories.items_repository",
        "description": "src.repositories.items_repository",
        "isExtraImport": true,
        "detail": "src.repositories.items_repository",
        "documentation": {}
    },
    {
        "label": "CreateItemDto",
        "importPath": "src.dtos.create_item_dto",
        "description": "src.dtos.create_item_dto",
        "isExtraImport": true,
        "detail": "src.dtos.create_item_dto",
        "documentation": {}
    },
    {
        "label": "CreateItemDto",
        "importPath": "src.dtos.create_item_dto",
        "description": "src.dtos.create_item_dto",
        "isExtraImport": true,
        "detail": "src.dtos.create_item_dto",
        "documentation": {}
    },
    {
        "label": "CreateItemDto",
        "importPath": "src.dtos.create_item_dto",
        "description": "src.dtos.create_item_dto",
        "isExtraImport": true,
        "detail": "src.dtos.create_item_dto",
        "documentation": {}
    },
    {
        "label": "GetItemDto",
        "importPath": "src.dtos.get_item_dto",
        "description": "src.dtos.get_item_dto",
        "isExtraImport": true,
        "detail": "src.dtos.get_item_dto",
        "documentation": {}
    },
    {
        "label": "GetItemDto",
        "importPath": "src.dtos.get_item_dto",
        "description": "src.dtos.get_item_dto",
        "isExtraImport": true,
        "detail": "src.dtos.get_item_dto",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "UserService",
        "importPath": "services.users_service",
        "description": "services.users_service",
        "isExtraImport": true,
        "detail": "services.users_service",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "src.repositories.users_repository",
        "description": "src.repositories.users_repository",
        "isExtraImport": true,
        "detail": "src.repositories.users_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "src.repositories.users_repository",
        "description": "src.repositories.users_repository",
        "isExtraImport": true,
        "detail": "src.repositories.users_repository",
        "documentation": {}
    },
    {
        "label": "SignInDto",
        "importPath": "src.dtos.sign_in_dto",
        "description": "src.dtos.sign_in_dto",
        "isExtraImport": true,
        "detail": "src.dtos.sign_in_dto",
        "documentation": {}
    },
    {
        "label": "SignInDto",
        "importPath": "src.dtos.sign_in_dto",
        "description": "src.dtos.sign_in_dto",
        "isExtraImport": true,
        "detail": "src.dtos.sign_in_dto",
        "documentation": {}
    },
    {
        "label": "SignUpDto",
        "importPath": "src.dtos.sign_up_dto",
        "description": "src.dtos.sign_up_dto",
        "isExtraImport": true,
        "detail": "src.dtos.sign_up_dto",
        "documentation": {}
    },
    {
        "label": "SignUpDto",
        "importPath": "src.dtos.sign_up_dto",
        "description": "src.dtos.sign_up_dto",
        "isExtraImport": true,
        "detail": "src.dtos.sign_up_dto",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tortoise",
        "description": "tortoise",
        "isExtraImport": true,
        "detail": "tortoise",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "tortoise",
        "description": "tortoise",
        "isExtraImport": true,
        "detail": "tortoise",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tortoise",
        "description": "tortoise",
        "isExtraImport": true,
        "detail": "tortoise",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "tortoise",
        "description": "tortoise",
        "isExtraImport": true,
        "detail": "tortoise",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "tortoise",
        "description": "tortoise",
        "isExtraImport": true,
        "detail": "tortoise",
        "documentation": {}
    },
    {
        "label": "Tortoise",
        "importPath": "tortoise",
        "description": "tortoise",
        "isExtraImport": true,
        "detail": "tortoise",
        "documentation": {}
    },
    {
        "label": "PayEnum",
        "importPath": "src.type.pay_enum",
        "description": "src.type.pay_enum",
        "isExtraImport": true,
        "detail": "src.type.pay_enum",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.user_model",
        "description": "src.models.user_model",
        "isExtraImport": true,
        "detail": "src.models.user_model",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.user_model",
        "description": "src.models.user_model",
        "isExtraImport": true,
        "detail": "src.models.user_model",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tortoise.models",
        "description": "tortoise.models",
        "isExtraImport": true,
        "detail": "tortoise.models",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "src.models.item_model",
        "description": "src.models.item_model",
        "isExtraImport": true,
        "detail": "src.models.item_model",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "starlette.config",
        "description": "starlette.config",
        "isExtraImport": true,
        "detail": "starlette.config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "starlette.config",
        "description": "starlette.config",
        "isExtraImport": true,
        "detail": "starlette.config",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "items",
        "importPath": "controllers.item_controller",
        "description": "controllers.item_controller",
        "isExtraImport": true,
        "detail": "controllers.item_controller",
        "documentation": {}
    },
    {
        "label": "users",
        "importPath": "src.controllers.user_controller",
        "description": "src.controllers.user_controller",
        "isExtraImport": true,
        "detail": "src.controllers.user_controller",
        "documentation": {}
    },
    {
        "label": "get_item_service",
        "kind": 2,
        "importPath": "src.controllers.item_controller",
        "description": "src.controllers.item_controller",
        "peekOfCode": "def get_item_service():\n  repository = ItemRepository()\n  return ItemService(repository)\n@items.post(\"/\")\nasync def create_items(dto: CreateItemDto, service: ItemService = Depends(get_item_service)):\n  try:\n    item = await service.create_item(dto)\n    if not item:\n      raise Exception('아이템 생성 실패')\n    return JSONResponse(",
        "detail": "src.controllers.item_controller",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "src.controllers.item_controller",
        "description": "src.controllers.item_controller",
        "peekOfCode": "items = APIRouter(\n  prefix=\"/items\",\n  tags = [\"items\"],\n  responses = {404: {\"description\": \"Not Found\"}},\n)\ndef get_item_service():\n  repository = ItemRepository()\n  return ItemService(repository)\n@items.post(\"/\")\nasync def create_items(dto: CreateItemDto, service: ItemService = Depends(get_item_service)):",
        "detail": "src.controllers.item_controller",
        "documentation": {}
    },
    {
        "label": "payments",
        "kind": 5,
        "importPath": "src.controllers.pay_controller",
        "description": "src.controllers.pay_controller",
        "peekOfCode": "payments = APIRouter(\n  prefix= \"/payments\", \n  tags=[\"payments\"], \n  responses={404: {\"description\": \"Not Found\"}}\n)\n@payments.post(\"/identity-verify\")\nasync def identity_verify(dto):\n  print(dto)\n  try: \n    if not dto: ",
        "detail": "src.controllers.pay_controller",
        "documentation": {}
    },
    {
        "label": "get_user_service",
        "kind": 2,
        "importPath": "src.controllers.user_controller",
        "description": "src.controllers.user_controller",
        "peekOfCode": "def get_user_service():\n  repository = UserRepository()\n  return UserService(repository)\nusers = APIRouter(\n  prefix= \"/users\", \n  tags=[\"users\"], \n  responses={404: {\"description\": \"Not Found\"}}\n)\n@users.get(\"/\")\ndef read_users():",
        "detail": "src.controllers.user_controller",
        "documentation": {}
    },
    {
        "label": "read_users",
        "kind": 2,
        "importPath": "src.controllers.user_controller",
        "description": "src.controllers.user_controller",
        "peekOfCode": "def read_users():\n  return {\"hello\": \"world\"}\n@users.post(\"/sign-up\")\nasync def sign_up(dto: SignUpDto, service: UserService = Depends(get_user_service)):\n  try:\n    user_acnt = await service.sign_up(dto)\n    if user_acnt:\n      return JSONResponse(\n        content={\"message\": \"계정 생성을 완료하였습니다. 로그인 해주세요.\"},\n        status_code=201",
        "detail": "src.controllers.user_controller",
        "documentation": {}
    },
    {
        "label": "users",
        "kind": 5,
        "importPath": "src.controllers.user_controller",
        "description": "src.controllers.user_controller",
        "peekOfCode": "users = APIRouter(\n  prefix= \"/users\", \n  tags=[\"users\"], \n  responses={404: {\"description\": \"Not Found\"}}\n)\n@users.get(\"/\")\ndef read_users():\n  return {\"hello\": \"world\"}\n@users.post(\"/sign-up\")\nasync def sign_up(dto: SignUpDto, service: UserService = Depends(get_user_service)):",
        "detail": "src.controllers.user_controller",
        "documentation": {}
    },
    {
        "label": "CreateItemDto",
        "kind": 6,
        "importPath": "src.dtos.create_item_dto",
        "description": "src.dtos.create_item_dto",
        "peekOfCode": "class CreateItemDto(BaseModel):\n  name: str\n  description: str\n  price: int",
        "detail": "src.dtos.create_item_dto",
        "documentation": {}
    },
    {
        "label": "GetItemDto",
        "kind": 6,
        "importPath": "src.dtos.get_item_dto",
        "description": "src.dtos.get_item_dto",
        "peekOfCode": "class GetItemDto(BaseModel):\n  id: UUID\n  name: str\n  description: str\n  price: int\n  created_at: datetime",
        "detail": "src.dtos.get_item_dto",
        "documentation": {}
    },
    {
        "label": "SignInDto",
        "kind": 6,
        "importPath": "src.dtos.sign_in_dto",
        "description": "src.dtos.sign_in_dto",
        "peekOfCode": "class SignInDto(BaseModel): \n  email: str\n  password: str",
        "detail": "src.dtos.sign_in_dto",
        "documentation": {}
    },
    {
        "label": "SignUpDto",
        "kind": 6,
        "importPath": "src.dtos.sign_up_dto",
        "description": "src.dtos.sign_up_dto",
        "peekOfCode": "class SignUpDto(BaseModel):\n  name: str\n  username: str\n  email: str\n  password: str\n  phone: str\n# class SignUpDto(BaseModel):\n#     name: str = Field(min_length=1, max_length=50, description=\"User's full name\")\n#     username: str = Field(min_length=3, max_length=20, description=\"Unique username\")\n#     email: str = Field(regex=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4}$\", description=\"Valid email address\")",
        "detail": "src.dtos.sign_up_dto",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "src.models.item_model",
        "description": "src.models.item_model",
        "peekOfCode": "class Item(Model):\n    id = fields.UUIDField(pk=True, default=uuid.uuid4)\n    name = fields.CharField(max_length = 10, null = False)\n    description = fields.CharField(max_length = 100, null = False)\n    price = fields.IntField(null = False)\n    created_at = fields.DatetimeField(auto_now=True)\n    class Meta:\n        table = \"item\"\n        table_description = \"상품 테이블\"\n    def __str__(self):",
        "detail": "src.models.item_model",
        "documentation": {}
    },
    {
        "label": "Payment",
        "kind": 6,
        "importPath": "src.models.pay_model",
        "description": "src.models.pay_model",
        "peekOfCode": "class Payment(Model):\n    id = fields.UUIDField(pk=True, default=uuid.uuid4)\n    customer_id = User.id\n    order_id = fields.CharField(unique=True, null = False)\n    type = fields.CharEnumField(enum_type=PayEnum)\n    price = fields.IntField(null = False)\n    receipt = fields.CharField(null = False)\n    created_at = fields.DatetimeField(auto_now=True)\n    class Meta:\n        table = \"payment\"",
        "detail": "src.models.pay_model",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "src.models.user_model",
        "description": "src.models.user_model",
        "peekOfCode": "class User(Model):\n    id = fields.UUIDField(pk=True, default=uuid.uuid4)\n    name = fields.CharField(max_length = 10, null = False)\n    username = fields.CharField(max_length = 10, null = False)\n    email = fields.CharField(max_length = 20, unique = True, null = False)\n    phone = fields.CharField(max_length = 11, unique = True, null = False)\n    password = fields.CharField(max_length = 100, null = False)\n    created_at = fields.DatetimeField(auto_now=True)\n    class Meta:\n        table = \"user\"",
        "detail": "src.models.user_model",
        "documentation": {}
    },
    {
        "label": "ItemRepository",
        "kind": 6,
        "importPath": "src.repositories.items_repository",
        "description": "src.repositories.items_repository",
        "peekOfCode": "class ItemRepository:\n  def __init__(self, repository=Item):\n    self.repository = repository\n  async def create(self, dto: CreateItemDto):\n    try:\n      return await self.repository.create(name=dto.name, description=dto.description, price=dto.price)\n    except Exception as error:\n      raise error\n  async def find_items(self, page: int, limit: int):\n    skip = (page - 1) * limit",
        "detail": "src.repositories.items_repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "kind": 6,
        "importPath": "src.repositories.users_repository",
        "description": "src.repositories.users_repository",
        "peekOfCode": "class UserRepository:\n  def __init__(self, repository=User):\n    self.repository = repository\n  async def exist_email(self, email: str) -> bool:\n    exist_user = await self.repository.filter(email=email).exists()\n    return exist_user\n  async def exist_phone(self, phone: str) -> bool:\n    exist_phone = await self.repository.filter(phone=phone).exists()\n    return exist_phone\n  async def create(self, dto: dict):",
        "detail": "src.repositories.users_repository",
        "documentation": {}
    },
    {
        "label": "ItemService",
        "kind": 6,
        "importPath": "src.services.items_service",
        "description": "src.services.items_service",
        "peekOfCode": "class ItemService:\n  def __init__(self, repository: ItemRepository):\n    self.repository = repository\n  async def create_item(self, dto: CreateItemDto):\n    return await self.repository.create(dto)\n  async def get_items(self, page: int, limit: int):\n    try:\n      items = await self.repository.find_items(page, limit)\n      return items\n    except Exception as error:",
        "detail": "src.services.items_service",
        "documentation": {}
    },
    {
        "label": "UserService",
        "kind": 6,
        "importPath": "src.services.users_service",
        "description": "src.services.users_service",
        "peekOfCode": "class UserService:\n  config = Config('.env')\n  def __init__(self, repository = UserRepository):\n    self.repository = repository\n  async def exist_email(self, email: str):\n    return await self.repository.exist_email(email)\n  async def exist_phone(self, phone: str):\n    return await self.repository.exist_phone(phone)\n  async def create_acnt(self, dto: dict):\n    return await self.repository.create(dto)",
        "detail": "src.services.users_service",
        "documentation": {}
    },
    {
        "label": "PayEnum",
        "kind": 6,
        "importPath": "src.type.pay_enum",
        "description": "src.type.pay_enum",
        "peekOfCode": "class PayEnum(Enum):\n  Payment = 'payment'\n  Return = 'return'\n  Refund = 'refund'",
        "detail": "src.type.pay_enum",
        "documentation": {}
    },
    {
        "label": "read_root",
        "kind": 2,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "def read_root():\n    return {\"Hello\": \"World\"}\n# FastAPI startup 이벤트에서 Tortoise 초기화",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "app = FastAPI(lifespan=lifespan)\n# 라우터 등록\napp.include_router(items)\napp.include_router(users)\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n# FastAPI startup 이벤트에서 Tortoise 초기화",
        "detail": "src.main",
        "documentation": {}
    }
]